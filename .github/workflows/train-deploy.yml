name: Train & Deploy
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  MLFLOW_TRACKING_URI: file:///tmp/mlruns

jobs:
  train:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Upgrade pip and install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          
      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found, installing basic ML dependencies"
            pip install mlflow scikit-learn pandas numpy matplotlib seaborn
          fi
          pip install mlflow  # Ensure MLflow is installed
          
      - name: Verify installation
        run: |
          python -c "import mlflow; print(f'MLflow version: {mlflow.__version__}')"
          python -c "import pandas; print(f'Pandas version: {pandas.__version__}')"
          
      - name: Setup MLflow local tracking
        run: |
          mkdir -p /tmp/mlruns
          export MLFLOW_TRACKING_URI=file:///tmp/mlruns
          
      - name: Create required directories
        run: |
          mkdir -p data/drift_reports
          mkdir -p data/processed
          mkdir -p models
          mkdir -p logs
          
      - name: List project structure
        run: |
          echo "Project structure:"
          find . -name "*.py" -o -name "*.txt" -o -name "*.yml" -o -name "*.yaml" | head -20
          
      - name: Run Training Pipeline
        run: |
          echo "Starting training pipeline..."
          if [ -f main.py ]; then
            python main.py
          elif [ -f src/main.py ]; then
            python src/main.py
          elif [ -f train.py ]; then
            python train.py
          else
            echo "No main training script found. Looking for Python files..."
            ls -la *.py || echo "No Python files in root directory"
            exit 1
          fi
        env:
          MLFLOW_TRACKING_URI: file:///tmp/mlruns
          PYTHONPATH: ${{ github.workspace }}
          
      - name: Verify training outputs
        run: |
          echo "Checking for training outputs..."
          ls -la /tmp/mlruns/ || echo "No MLflow runs found"
          ls -la data/drift_reports/ || echo "No drift reports found"
          ls -la models/ || echo "No model files found"
          
      - name: Upload Training Logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: training-logs
          path: |
            logs/
            *.log
          if-no-files-found: ignore
          
      - name: Upload Drift Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: drift-report
          path: data/drift_reports/
          if-no-files-found: ignore
          
      - name: Upload MLflow Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: mlflow-runs
          path: /tmp/mlruns/
          if-no-files-found: ignore
          
      - name: Upload Model Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: trained-models
          path: models/
          if-no-files-found: ignore

  deploy:
    needs: train
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download training artifacts
        uses: actions/download-artifact@v3
        with:
          name: trained-models
          path: models/
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build Docker Image
        run: |
          if [ -d app ]; then
            cd app
          fi
          
          # Create Dockerfile if it doesn't exist
          if [ ! -f Dockerfile ]; then
            echo "Creating basic Dockerfile..."
            cat > Dockerfile << 'EOF'
FROM python:3.10-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .
COPY ../models ./models

EXPOSE 8000

CMD ["python", "app.py"]
EOF
          fi
          
          docker build -t model-forge-api:${{ github.sha }} .
          
      - name: Test Docker Image
        run: |
          docker run --rm -d --name test-container -p 8000:8000 model-forge-api:${{ github.sha }}
          sleep 10
          curl -f http://localhost:8000/health || echo "Health check failed"
          docker stop test-container
          
      - name: Push to DockerHub
        if: false  # Set to true when DockerHub secrets are configured
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag model-forge-api:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/model-forge-api:latest
          docker tag model-forge-api:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/model-forge-api:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/model-forge-api:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/model-forge-api:${{ github.sha }}
